@component-name = "portal-security"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "AntiSamy";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			WikiPage.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "This is a use case for LRQA-4988."
	@priority = "4"
	test ScriptInWikiPortletShouldBeSanitized {
		property portal.upstream = "feri";

		task ("Add public widget page") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			SitePages.addPublicPage(pageName = "AntiSamy Test Page");
		}

		task ("Add Wiki portlet and insert JS as content") {
			Navigator.gotoPage(pageName = "AntiSamy Test Page");

			Portlet.addPG(portletName = "Wiki");

			var wikiPageContent = '''
					<p id='demo'>PASS</p>

					<script type='text/javascript'>
						document.getElementById('demo').innerHTML = 'FAIL';
					</script>
				''';

			WikiPage.addFrontPagePG(
				htmlSource = "true",
				wikiPageContent = "${wikiPageContent}");
		}

		task ("Assert: script is sanitized so page content remains unchanged") {
			WikiPage.viewPG(
				wikiPageContent = "PASS",
				wikiPageTitle = "FrontPage");
		}
	}

	@description = "This is a use case for LPS-112581 and LPS-115803."
	@priority = "5"
	test AssertSpecificRulesWorksForModel {
		property antisamy.enabled = "true";
		property portal.upstream = "feri";
		property test.name.skip.portal.instance = "AntiSamy#AssertSpecificRulesWorksForModel";

		task ("Verify address in console") {
			SAMLNavigation.viewConsoleValue(consoleValue = "STARTED com.liferay.portal.security.antisamy");
		}

		task ("Add and view kb Article") {
			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Knowledge Base");

			KBArticle.addCP(
				kbArticleAddViaSource = "true",
				kbArticleContentSource = '''<p data-test="test">Hello Liferay</p>''',
				kbArticleTitle = "Test AntiSamy");

			KBAdmin.openKBAdmin(siteURLKey = "guest");

			KBArticle.viewCP(
				kbArticleContent = "Hello Liferay",
				kbArticleTitle = "Test AntiSamy");
		}

		task ("Edit kb article and save as draft") {
			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Knowledge Base");

			KBArticle.editCP(
				kbArticleTitle = "Test AntiSamy",
				saveAsDraft = "true");
		}

		task ("Assert CKEditor source value") {
			CKEditor.assertSourceValue(sourceValue = "<p>Hello Liferay</p>");
		}
	}

	@description = "This is a use case for LPS-112581 and LPS-115803."
	@priority = "5"
	test Something {
		property antisamy.enabled = "true";
		property portal.upstream = "feri";
		property test.name.skip.portal.instance = "AntiSamy#Something";

		task ("Verify address in console") {
			SAMLNavigation.viewConsoleValue(consoleValue = "STARTED com.liferay.portal.security.antisamy");
		}

		task ("Edit configuration file url") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Security Tools",
				configurationName = "AntiSamy Sanitizer by Class Name",
				configurationScope = "System Scope");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "com.liferay.knowledge.base.model.KBArticle");

			SystemSettings.editTextAreaSetting(
				settingName = "Configuration File URL",
				settingValue = "/META-INF/knowledge-base-sanitizer-configuration.xml");

			SystemSettings.saveConfiguration();

			AssertElementNotPresent(locator1 = "Message#SUCCESS");
		}
	}

	@description = "This is a use case for LRQA-42763."
	@priority = "4"
	test ScriptInWebContentDisplayPortletShouldBeSanitized {
		property portal.upstream = "feri";

		task ("Add public widget page") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			SitePages.addPublicPage(pageName = "Web Content Display Page");
		}

		task ("Add Web Content Display portlet and insert JS as content") {
			Navigator.gotoPage(pageName = "Web Content Display Page");

			Portlet.addPG(portletName = "Web Content Display");

			var webContentContent = '''
					<p id='demo'>FAIL</p>

					<script type='text/javascript'>
						document.getElementById('demo').innerHTML = 'PASS';
					</script>
				''';

			WebContent.addPGViaWCD(
				webContentContent = "${webContentContent}",
				webContentTitle = "WC WebContent Title");
		}

		task ("Assert: script is sanitized so page content remains unchanged") {
			WebContent.viewPGViaWCD(
				webContentContent = "PASS",
				webContentTitle = "Web Content Title");
		}
	}

}